#!/usr/bin/env ruby
require 'optparse'
require 'pathname'

VL_NORMAL   = 10
VL_VERBOSE  = 20
VL_DEBUG    = 30
LOGIO = STDOUT
@verbose = VL_NORMAL

def cmd(s)
  LOGIO.puts s if @verbose >= VL_VERBOSE
  result = `#{s}`
  LOGIO.puts result if @verbose >= VL_DEBUG
end

# option parser start
options = {
  inc_path: [],
  src_dir: File.expand_path('./src'),
  obj_dir: File.expand_path('./obj'),
  output_file: File.expand_path('./a.out')
}
option_parser = OptionParser.new do |opts|
  opts.banner = './build -s src_dir -b obj_dir -o output_file'

  opts.on('-s SRC_DIR', '--source-dir SRC_DIR', 'set source dir') do |s|
    options[:src_dir] = File.expand_path(s)
  end

  opts.on('-S SIMULATOR_PATH', '--simulator-path SIMULATOR_PATH', 'set simulator path') do |s|
    options[:simulator_path] = File.expand_path(s)
  end

  opts.on('-b OBJ_DIR', '--obj-dir OBJ_DIR', 'set obj dir') do |s|
    options[:obj_dir] = File.expand_path(s)
  end

  opts.on('-o OUTPUT_FILE', 'set output file') do |s|
    options[:output_file] = File.expand_path(s)
  end

  opts.on('-I INC_PATH', 'include path') do |s|
    options[:inc_path] << File.expand_path(s)
  end

  opts.on('-l LLVM_PATH', '--llvm LLVM_PATH', 'llvm path') do |l|
    options[:llvm_path] = File.expand_path l
  end

  opts.on('-V VERBOSE_LEVEL', '--verbose VERBOSE_LEVEL', 'set verbose level') do |v|
    @verbose = v.to_i
  end

end.parse!
# option parser end

llvm_bin_path = options[:llvm_path] || '/home/alexwang/.CLion2016.1/system/cmake/generated/llvm-v9-master-32433d16/32433d16/Debug/bin'
alex_simulator = options[:simulator_path] || '/home/alexwang/dev/proj/os/alex-machine/simulator/sim.js'
nodejs =        'node'
llc =           File.join llvm_bin_path, 'llc'
lld =           File.join llvm_bin_path, 'lld'
llvm_objdump =  File.join llvm_bin_path, 'llvm-objdump'
llvm_link =     File.join llvm_bin_path, 'llvm-link'
assembler =     File.join llvm_bin_path, 'llvm-mc'
clang =         'clang'
mkdir =         'mkdir -p'

clangflags =    '-c -emit-llvm -nostdinc -g -fno-builtin -m32 -mno-sse -fno-stack-protector'
lldflags =      '-flavor gnu'
llcflags =      '-march=alex -filetype=obj'
llcasmflags =   '-march=alex -filetype=asm'
llcasmflags =   '-march=alex -filetype=asm'
asm_flags =     '-arch=alex -assemble -filetype=obj'

suffix = %w'c cpp s'
# initialize include dirs
includes = options[:inc_path] + (`find #{options[:src_dir]} -type d`.split "\n")
include_params = includes.reduce('') do |sum, inc|
  sum + " -I#{inc}"
end

# clang compile c to llvm ir
files = `find #{options[:src_dir]} | grep -E \"\\.(#{suffix.join '|'})$\"`
sources = files.split "\n"
llvm_objs = []
alex_objs = []
sources.each do |source|
  rel_path = Pathname.new(File.expand_path source).relative_path_from(Pathname.new options[:src_dir]).to_s
  file_name = rel_path.split('/').last
  suffix = rel_path.split('.').last.downcase

  llvm_obj_file = File.join(options[:obj_dir],rel_path+'.bc')
  alex_obj_file = llvm_obj_file + '.o'
  llvm_objs << llvm_obj_file
  alex_objs << alex_obj_file
  cmd "#{mkdir} #{llvm_obj_file.split('/')[0...-1].join('/')}"

  if %w'c cpp'.include?(suffix)
    cmd "#{clang} #{clangflags} #{include_params} #{source} -o #{llvm_obj_file}"
    cmd "#{llc} #{llcasmflags} #{llvm_obj_file} -o #{llvm_obj_file}.ll"
    cmd "#{llc} #{llcflags} #{llvm_obj_file} -o #{alex_obj_file}"
  else
    cmd "#{assembler} #{asm_flags} #{source} -o #{alex_obj_file}"
  end
end

cmd "#{mkdir} #{options[:output_file].split('/')[0...-1].join('/')}"
#llvm_one_big_obj = options[:output_file] + '.bc'
#my_obj = options[:output_file] + '.o'

# link to one llvm ir file
#cmd "#{llvm_link} -o #{llvm_one_big_obj} #{llvm_objs.join ' '}"

# compile llvm ir to alex obj file
#cmd "#{llc} #{llcflags} #{llvm_one_big_obj} -o #{my_obj}"
#cmd "#{llc} #{llcasmflags} #{llvm_one_big_obj} -o #{my_obj}.S"

# link
cmd "#{lld} #{lldflags} #{alex_objs.join(' ')} -o #{options[:output_file]}"

cmd "./dwarf2json #{options[:output_file]} #{options[:output_file]}.json"
# run simulator
#system "#{nodejs} #{alex_simulator} #{options[:output_file]}"
