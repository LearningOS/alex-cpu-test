#!/usr/bin/env ruby
require 'optparse'
require 'pathname'

`./clean`

llvm_bin_path = '/home/alexwang/.CLion2016.1/system/cmake/generated/llvm-v9-master-32433d16/32433d16/Debug/bin'
llc =           File.join llvm_bin_path, 'llc'
lld =           File.join llvm_bin_path, 'lld'
llvm_objdump =  File.join llvm_bin_path, 'llvm-objdump'
llvm_link =     'llvm-link'
clang =         'clang'


clangflags =        '-c -emit-llvm -fno-builtin -m32 -mno-sse -fno-stack-protector'
lldflags =      '-flavor gnu'
llcflags =      '-march=alex -filetype=obj'
llcasmflags =   '-march=alex -filetype=asm'

suffix = ['c', 'cpp']

# option parser start
options = { inc_path: [], src_dir: File.expand_path('./src'), obj_dir: File.expand_path('./obj'), output_file: File.expand_path('./a.out') }
option_parser = OptionParser.new do |opts|
  opts.banner = './build -s src_dir -b obj_dir -o output_file'

  opts.on('-s SRC_DIR', '--source-dir SRC_DIR', 'set source dir') do |s|
    options[:src_dir] = s =~ /^\// ? s : File.expand_path('.', s)
  end

  opts.on('-b OBJ_DIR', '--obj-dir OBJ_DIR', 'set obj dir') do |s|
    options[:obj_dir] = s =~ /^\// ? s : File.expand_path('.', s)
  end

  opts.on('-o OUTPUT_FILE', 'set output file') do |s|
    options[:output_file] = s =~ /^\// ? s : File.expand_path('.', s)
  end

  opts.on('-I INC_PATH', 'include path') do |s|
    options[:inc_path] << s =~ /^\// ? s : File.expand_path('.', s)
  end

end.parse!
# option parser end

includes = options[:inc_path] + (`find #{options[:src_dir]} -type d`.split "\n")
include_params = includes.reduce('') do |sum, inc|
  sum + " -I#{inc}"
end

# clang compile c to llvm ir
cmd = "find #{options[:src_dir]} | grep -E \"\\.(#{suffix.join '|'})$\""
puts cmd
sources = `#{cmd}`.split "\n"
llvm_objs = []
sources.each do |source|
  rel_path = Pathname.new(File.expand_path source).relative_path_from(Pathname.new options[:src_dir]).to_s
  file_name = rel_path.split('/').last
  llvm_obj_file = File.join(options[:obj_dir],rel_path+'.bc')
  llvm_objs << llvm_obj_file
  cmd = "mkdir -p #{llvm_obj_file.split('/')[0...-1].join('/')}"
  puts cmd
  Kernel.system cmd
  cmd = "clang #{clangflags} #{include_params} #{source} -o #{llvm_obj_file}"
  puts cmd
  Kernel.system cmd
  puts
end

`mkdir -p #{options[:output_file].split('/')[0...-1].join('/')}`
llvm_one_big_obj = options[:output_file] + '.bc'
my_obj = options[:output_file] + '.o'

# link to one llvm ir file
cmd = "llvm-link -o #{llvm_one_big_obj} #{llvm_objs.join ' '}"
puts cmd
puts
Kernel.system cmd

# compile llvm ir to cpu0 obj file
cmd = "#{llc} #{llcflags} #{llvm_one_big_obj} -o #{my_obj}" 
Kernel.system cmd
puts cmd
cmd = "#{llc} #{llcasmflags} #{llvm_one_big_obj} -o #{my_obj}.S"
Kernel.system cmd
puts cmd
puts

# link
cmd = "#{lld} #{lldflags} #{my_obj} -o #{options[:output_file]}"
puts cmd
puts
Kernel.system cmd
